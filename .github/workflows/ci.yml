# .github/workflows/ci.yml
name: Dutopia CI

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.os }} build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            rs/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('rs/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build Rust project (rs/)
        working-directory: rs
        run: cargo build -r

      - name: Test Rust project (rs/)
        working-directory: rs
        run: cargo test -r

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install deps (browser/)
        working-directory: browser
        run: npm i

      - name: Build Svelte (browser/)
        working-directory: browser
        run: npm run build

      - name: Upload Rust artifacts
        uses: actions/upload-artifact@v4
        with:
          name: statwaker-${{ matrix.os }}-rust
          path: rs/target/**
          if-no-files-found: error

      - name: Upload Svelte artifacts
        uses: actions/upload-artifact@v4
        with:
          name: statwaker-${{ matrix.os }}-browser
          path: browser/build/**
          if-no-files-found: warn

  release:
    runs-on: ubuntu-latest
    needs: build
    env:
      # Pin the cargo-edit version so the cache key is stable. Bump to refresh.
      CARGO_EDIT_VERSION: "0.12.3"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Cache the installed cargo binaries (includes cargo-set-version from cargo-edit)
      - name: Cache cargo bin (cargo-edit)
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-bin-cargo-edit-${{ env.CARGO_EDIT_VERSION }}
          restore-keys: |
            ${{ runner.os }}-cargo-bin-

      # Cache registry/git to speed up the first cargo-install of cargo-edit
      - name: Cache Cargo registry (tools)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-tools-${{ env.CARGO_EDIT_VERSION }}
          restore-keys: |
            ${{ runner.os }}-cargo-tools-

      - name: Ensure cargo-edit installed
        shell: bash
        run: |
          if ! command -v cargo-set-version >/dev/null 2>&1; then
            cargo install cargo-edit --version "${CARGO_EDIT_VERSION}"
          fi
          cargo-set-version --version >/dev/null 2>&1 || { echo "cargo-set-version not found after install"; exit 1; }

      - name: Bump patch version
        working-directory: rs
        run: cargo set-version --bump patch

      - name: Get new version
        id: cargo_version
        run: |
          VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Commit and push version bump
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add rs/Cargo.toml rs/Cargo.lock
          git commit -m "chore: bump version to $VERSION" || echo "No changes to commit"
          git push origin HEAD:${GITHUB_REF_NAME}

      # - name: Create tag
      #   run: |
      #     git tag v${VERSION}
      #     git push origin v${VERSION}
